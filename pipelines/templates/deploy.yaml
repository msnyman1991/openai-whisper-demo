parameters:
  - name: environmentName
    type: string

stages:
  # displayName: 'IaC Deploy'
  - stage: Validation
    displayName: Validate IaC
    jobs:
      - job: Validate
        displayName: Validate Terraform
        steps:
          - template: validate.yaml

  - stage: Deploy
    jobs:
      - job: PlanTerraform
        steps:
          - template: install-terraform.yaml
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(service-connection)-${{ parameters.environmentName }}'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "##### TERRGRUNT Plan ALL #####"
                ## Clear Terragrunt cache
                find infrastructure/ -type d -name '.terragrunt-cache' -prune -exec rm -rf {} +
                cd infrastructure/live/${{ parameters.environmentName }}/$(location)
                ~/.tfenv/bin/terragrunt run-all plan --out=tfplan --terragrunt-non-interactive -compact-warnings

      - job: ApproveTerraform
        displayName: 'Terraform Approval'
        dependsOn: PlanTerraform
        pool: server
        timeoutInMinutes: 30 #time out in 30 min
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 30 #time out in 30 min
            inputs:
              instructions: 'Terraform will need approval'
              onTimeout: 'reject'

      - job: ApplyTerraform
        displayName: 'Terraform Apply'
        dependsOn: terraform_approval
        steps:
          - template: install-terraform.yaml
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(service-connection)-${{ parameters.environmentName }}'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "##### TERRGRUNT Apply ALL #####"
                ## Clear Terragrunt cache
                find infrastructure/ -type d -name '.terragrunt-cache' -prune -exec rm -rf {} +
                cd infrastructure/live/${{ parameters.environmentName }}/$(location)
                ~/.tfenv/bin/terragrunt run-all apply --terragrunt-non-interactive -compact-warnings

  - stage: DeployWhisper
    displayName: Deploy Whisper
    jobs:
      - job: DeployContainer
        steps:
          - template: install-docker.yaml
          - script: |
              # Clone the Whisper repository
              git clone https://github.com/openai/whisper.git

              # Change to the Whisper directory
              cd whisper

              # Build the Docker image
              docker build -t youracr.azurecr.io/whisper:latest .

              # Authenticate with Azure Container Registry
              docker login youracr.azurecr.io -u $(ACR_USERNAME) -p $(ACR_PASSWORD)

              # Push the Docker image to Azure Container Registry
              docker push youracr.azurecr.io/whisper:latest

              # Publish Docker image as Azure DevOps Artifact
              echo "##vso[artifact.upload containerfolder=/]youracr.azurecr.io/whisper:latest"

            displayName: 'Build and Push Docker Image'

        - task: AzureCLI@2
          inputs:
            azureSubscription: '$(service-connection)-${{ parameters.environmentName }}'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Define the inline script here
              acr_image="youracr.azurecr.io/whisper:latest"
              resource_group="YourResourceGroup"  # Replace with your resource group name
              container_name="YourContainerInstance"  # Replace with your container instance name
              location="YourAzureRegion"  # Replace with your desired Azure region

              # Deploy the Azure Container Instance
              az container create \
                --resource-group $resource_group \
                --name $container_name \
                --image $acr_image \
                --cpu 0.75 \
                --memory 1.5Gi \
                --registry-login-server youracr.azurecr.io \
                --registry-username $(ACR_USERNAME) \
                --registry-password $(ACR_PASSWORD) \
                --dns-name-label yourdnslabel \
                --ports 80

              # Wait for the deployment to finish (adjust sleep time as needed)
              sleep 60

              # Display container instance details
              az container show --resource-group $resource_group --name $container_name --query "{FQDN:ipAddress.fqdn, State:instanceView.state}"

          displayName: 'Deploy to Azure Container Instance'
